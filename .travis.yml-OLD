# Tao.Algorithm
#
# Copyright Fernando Pelliccioni 2016
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

language: cpp
sudo: false

matrix:
  include:
    # # clang-3.5
    # - env: CLANG_VERSION=3.5 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
    #   os: linux
    #   addons: &clang35
    #     apt:
    #       packages:
    #         - clang-3.5
    #       sources:
    #         - ubuntu-toolchain-r-test
    #         - llvm-toolchain-precise-3.5

    # - env: CLANG_VERSION=3.5 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
    #   os: linux
    #   addons: *clang35

    # - env: CLANG_VERSION=3.5 CXX_FLAGS="-std=c++14" BUILD_TYPE=Debug
    #   os: linux
    #   addons: *clang35

    # - env: CLANG_VERSION=3.5 CXX_FLAGS="-std=c++14" BUILD_TYPE=Release
    #   os: linux
    #   addons: *clang35

    # clang-3.6
    - env: CLANG_VERSION=3.6 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: linux
      addons: &clang36
        apt:
          packages:
            - clang-3.6
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6

    # - env: CLANG_VERSION=3.6 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
    #   os: linux
    #   addons: *clang36

    # - env: CLANG_VERSION=3.6 CXX_FLAGS="-std=c++14" BUILD_TYPE=Debug
    #   os: linux
    #   addons: *clang36

    # - env: CLANG_VERSION=3.6 CXX_FLAGS="-std=c++14" BUILD_TYPE=Release
    #   os: linux
    #   addons: *clang36

    # # gcc-4.9
    # - env: GCC_VERSION=4.9 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
    #   os: linux
    #   addons: &gcc49
    #     apt:
    #       packages:
    #         - g++-4.9
    #       sources:
    #         - ubuntu-toolchain-r-test

    # - env: GCC_VERSION=4.9 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
    #   os: linux
    #   addons: *gcc49

    # - env: GCC_VERSION=4.9 CXX_FLAGS="-std=c++1y" BUILD_TYPE=Debug
    #   os: linux
    #   addons: *gcc49

    # - env: GCC_VERSION=4.9 CXX_FLAGS="-std=c++1y" BUILD_TYPE=Release
    #   os: linux
    #   addons: *gcc49

    # # gcc-5
    # - env: GCC_VERSION=5 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
    #   os: linux
    #   addons: &gcc5
    #     apt:
    #       packages:
    #         - g++-5
    #       sources:
    #         - ubuntu-toolchain-r-test

    # - env: GCC_VERSION=5 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
    #   os: linux
    #   addons: *gcc5

    # - env: GCC_VERSION=5 CXX_FLAGS="-std=c++14" BUILD_TYPE=Debug
    #   os: linux
    #   addons: *gcc5

    # - env: GCC_VERSION=5 CXX_FLAGS="-std=c++14" BUILD_TYPE=Release
    #   os: linux
    #   addons: *gcc5

    # # Xcode 7
    # - env: CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
    #   os: osx
    #   osx_image: xcode7
    #   addons: &xcode7

    # - env: CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
    #   os: osx
    #   osx_image: xcode7
    #   addons: *xcode7

    # - env: CXX_FLAGS="-std=c++14" BUILD_TYPE=Release
    #   os: osx
    #   osx_image: xcode7
    #   addons: *xcode7

    # - env: CXX_FLAGS="-std=c++14" BUILD_TYPE=Release
    #   os: osx
    #   osx_image: xcode7
    #   addons: *xcode7


    ##########################################################################
    # Benchmarks
    ##########################################################################
    # - env: BENCHMARKS=true COMPILER=clang++-3.6 CXX_FLAGS="-std=c++14" CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release"
    # - env: BENCHMARKS=true COMPILER=clang++-3.7 CXX_FLAGS="-std=c++14" CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release"
    # - env: BENCHMARKS=true COMPILER=clang++-3.8 CXX_FLAGS="-std=c++14" CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release"


    - env: BENCHMARKS=true CLANG_VERSION=3.6 CXX_FLAGS="-std=c++14" BUILD_TYPE=Release
      os: linux
      addons: *clang36


branches:
  only:
    - master
    - develop

before_install:
  - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
  - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi

  # - if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then brew install cmake; fi

install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake
    fi

  # ############################################################################
  # # Install and use a more recent Ruby and install the gems for the benchmarks
  # ############################################################################
  # - rvm use 2.1 --install --binary --fuzzy
  # - gem install ruby-progressbar tilt

# install:
#   - mkdir build
#   - cd build
#   - export CXX_FLAGS="${CXX_FLAGS} -Wall -Wextra -Werror"
#   - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" ..


before_script:
  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"
  - git config --global user.email travis-bot@travis-ci.org

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - export CXX_FLAGS="${CXX_FLAGS} -Wall -Wextra -Werror"
  - cd ${TRAVIS_BUILD_DIR}
  # - (mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" ..)
  # - (mkdir build &&
  # - cd build
  # - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" ..
  - (mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" ..)

script:

  - (cd build && make tests)
  # - make tests -k

  ############################################################################
  # We only run the full benchmarks on `master` when we're not in a pull
  # request, because otherwise it takes too much Travis resources. Otherwise,
  # we only run partial benchmarks to make sure they compile and run properly.
  #
  # Note: The benchmarks associated to a version of the documentation are
  #       stored in `doc/html/benchmarks/`.
  ############################################################################
  - |
    if [[ "${BENCHMARKS}" == "true" ]]; then
      if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
        (cd build && make benchmarks) || exit 1
        # pwd
        # ls
        # ls build
        # ls build/benchmark

        # uname -a
        # pwd
        # uname -i
        # pwd
        # uname -m
        # pwd
        # getconf LONG_BIT
        # pwd
        # cat /proc/cpuinfo

        pwd 
        python --version
        pwd 


        compiler_slug=$(cd build && make travis_compiler_slug | grep 'travis_compiler_slug:' | cut -d ' ' -f 2)
        config_slug=$(cd build && make travis_config_slug | grep 'travis_config_slug:' | cut -d ' ' -f 2)
        cpu_arch=$(uname -m)

        # os_name=$(uname -s)
        os_name=$(echo "$(uname -s)" | tr '[:upper:]' '[:lower:]') 



        # Suppress output to avoid leaking the token when the command fails
        git clone https://fpelliccioni:${GITHUB_TOKEN}@github.com/tao-cpp/algorithm --depth 1 --branch=gh-pages doc/html &>/dev/null
        rm -rf doc/html/benchmarks/${config_slug}/${os_name}-${cpu_arch}/${compiler_slug}/
        mkdir -p doc/html/benchmarks/${config_slug}/${os_name}-${cpu_arch}/${compiler_slug}/

        ls doc/html/benchmarks/${config_slug}/${os_name}-${cpu_arch}/${compiler_slug}/

        # for benchmark in $(ls build/benchmark/*.exe | grep -v ".erb"); do
        for benchmark in $(ls build/benchmark/bench.*); do
          cp ${benchmark} doc/html/benchmarks/${config_slug}/${os_name}-${cpu_arch}/${compiler_slug}/
        done

        ls doc/html/benchmarks/${config_slug}/${os_name}-${cpu_arch}/${compiler_slug}/

        pushd doc/html
        git add --all .
        git commit --allow-empty -m "Update benchmarks to ${TRAVIS_COMMIT:0:7} for build type '${config_slug}' and compiler '${compiler_slug}'"

        # Suppress output to avoid leaking the token
        travis_retry git push origin gh-pages &>/dev/null
        # travis_retry git push origin gh-pages

        popd
      else
        export BOOST_HANA_JUST_CHECK_BENCHMARKS=true
        (cd build && make benchmarks -j2)
      fi
    fi

  # - make benchmarks -k


notifications:
  email: false
  webhooks:
    urls: https://webhooks.gitter.im/e/a19dd2b03bf676d2b622
    on_success: change
    on_failure: always


